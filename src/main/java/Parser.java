//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser. */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return Sym.class;
  }

  @Deprecated
  public Parser() { super(); }

  @Deprecated
  public Parser(java_cup.runtime.Scanner s) { super(s); }

  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    super(s, sf);
  }

  protected static final short _production_table[][] =
          unpackFromStrings(new String[] {
                  "\000\006\000\002\002\005\000\002\002\004\000\002\002" +
                          "\005\000\002\002\005\000\002\002\005\000\002\002\003"
          });

  public short[][] production_table() { return _production_table; }

  protected static final short[][] _action_table =
          unpackFromStrings(new String[] {
                  "\000\014\000\004\010\004\001\002\000\014\002\ufffc\004" +
                          "\ufffc\005\ufffc\006\ufffc\007\ufffc\001\002\000\014\002\012" +
                          "\004\006\005\007\006\011\007\010\001\002\000\004\010" +
                          "\004\001\002\000\004\010\004\001\002\000\004\010\004" +
                          "\001\002\000\004\010\004\001\002\000\004\002\000\001" +
                          "\002\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
                          "\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
                          "\ufffd\001\002\000\014\002\uffff\004\uffff\005\uffff\006\011" +
                          "\007\010\001\002\000\014\002\001\004\001\005\001\006" +
                          "\011\007\010\001\002"
          });

  public short[][] action_table() { return _action_table; }

  protected static final short[][] _reduce_table =
          unpackFromStrings(new String[] {
                  "\000\014\000\004\002\004\001\001\000\002\001\001\000" +
                          "\002\001\001\000\004\002\015\001\001\000\004\002\014" +
                          "\001\001\000\004\002\013\001\001\000\004\002\012\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001"
          });

  public short[][] reduce_table() { return _reduce_table; }

  protected CUP$Parser$actions action_obj;

  protected void init_actions() {
    action_obj = new CUP$Parser$actions(this);
  }

  public java_cup.runtime.Symbol do_action(
          int act_num,
          java_cup.runtime.lr_parser parser,
          java.util.Stack stack,
          int top)
          throws java.lang.Exception {
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  public int start_state() { return 0; }

  public int start_production() { return 1; }

  public int EOF_sym() { return 0; }

  public int error_sym() { return 1; }

  /** Cup generated class to encapsulate user supplied action code. */
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$Parser$actions {
    private final Parser parser;

    CUP$Parser$actions(Parser parser) {
      this.parser = parser;
    }

    public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {

      java_cup.runtime.Symbol CUP$Parser$result;

      switch (CUP$Parser$act_num) {
        case 0: // expr ::= expr PLUS expr
        {
          Integer RESULT = null;
          int e1 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
          int e2 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
          RESULT = e1 + e2;
          CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
        }
        return CUP$Parser$result;

        case 1: // $START ::= expr EOF
        {
          Object RESULT = null;
          int start_val = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
          RESULT = start_val;
          CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
        }
        CUP$Parser$parser.done_parsing();
        return CUP$Parser$result;

        case 2: // expr ::= expr MINUS expr
        {
          Integer RESULT = null;
          int e1 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
          int e2 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
          RESULT = e1 - e2;
          CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
        }
        return CUP$Parser$result;

        case 3: // expr ::= expr TIMES expr
        {
          Integer RESULT = null;
          int e1 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
          int e2 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
          RESULT = e1 * e2;
          CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
        }
        return CUP$Parser$result;

        case 4: // expr ::= expr DIVIDE expr
        {
          Integer RESULT = null;
          int e1 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
          int e2 = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
          if (e2 == 0)
            throw new ArithmeticException("Divisi√≥n entre cero");
          RESULT = e1 / e2;
          CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
        }
        return CUP$Parser$result;

        case 5: // expr ::= NUMBER
        {
          Integer RESULT = null;
          int num = (Integer) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
          RESULT = num;
          CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
        }
        return CUP$Parser$result;

        default:
          throw new Exception("Invalid action number " + CUP$Parser$act_num + " found in internal parse table");
      }
    }

    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
      return CUP$Parser$do_action_part00000000(CUP$Parser$act_num, CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
    }
  }
}
