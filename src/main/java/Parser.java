
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java.util.HashMap;
import java.text.DecimalFormat;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\006\006" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\006\000\002\004\007\000\002\005\003\000\002" +
    "\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\006\004\005\012\004\001\002\000\004\013" +
    "\032\001\002\000\004\006\014\001\002\000\010\002\ufffd" +
    "\004\ufffd\012\ufffd\001\002\000\004\002\013\001\002\000" +
    "\010\002\ufffe\004\ufffe\012\ufffe\001\002\000\010\002\uffff" +
    "\004\005\012\004\001\002\000\004\002\000\001\002\000" +
    "\004\002\001\001\002\000\010\004\017\011\015\012\016" +
    "\001\002\000\010\005\ufffb\007\ufffb\010\ufffb\001\002\000" +
    "\010\005\ufffa\007\ufffa\010\ufffa\001\002\000\004\006\027" +
    "\001\002\000\006\005\ufff6\007\ufff6\001\002\000\006\005" +
    "\023\007\024\001\002\000\010\005\ufff9\007\ufff9\010\ufff9" +
    "\001\002\000\010\004\017\011\015\012\016\001\002\000" +
    "\004\010\025\001\002\000\010\002\ufff7\004\ufff7\012\ufff7" +
    "\001\002\000\006\005\ufff5\007\ufff5\001\002\000\010\004" +
    "\017\011\015\012\016\001\002\000\006\005\023\007\031" +
    "\001\002\000\010\005\ufff8\007\ufff8\010\ufff8\001\002\000" +
    "\010\004\017\011\015\012\016\001\002\000\004\010\034" +
    "\001\002\000\010\002\ufffc\004\ufffc\012\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\012\002\006\003\010\004\007\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\011\003" +
    "\010\004\007\006\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\020\007\017\010\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\025\010\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\027\007\017\010\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\032" +
    "\010\021\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static final int EXPECTED_CONFLICTS = 3;

  // HashMap para almacenar las variables
  private HashMap<String, Double> variables = new HashMap<>();

  // Método para obtener el valor de una variable
  public double getVariableValue(String varName) throws Exception {
    if (!variables.containsKey(varName)) {
      throw new Exception("Variable '" + varName + "' no declarada.");
    }
    return variables.get(varName);
  }

  // Método para asignar un valor a una variable
  public void setVariableValue(String varName, Double value) {
    variables.put(varName, value);
  }

  // Formato para moneda
  private static final DecimalFormat currencyFormat = new DecimalFormat("$#,##0.00");
  // Formato para porcentaje
  private static final DecimalFormat percentageFormat = new DecimalFormat("0.00%");


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= sentencia programa 
            {
              Object RESULT =null;
		int outputleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int outputright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object output = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = output + "\n" + resto;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= sentencia 
            {
              Object RESULT =null;
		int outputleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int outputright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object output = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = output;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= comando 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = c;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = dv;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= ID EQ expresion_numerica SEMIC 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parser.setVariableValue(varName, value);
        RESULT = "✅ Variable '" + varName + "' asignada a " + String.format("%.2f", value);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion_numerica ::= NUMERO 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion_numerica ::= ID 
            {
              Double RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        try {
            RESULT = parser.getVariableValue(varName);
        } catch (Exception e) {
            System.err.println(e.getMessage());
            RESULT = Double.NaN; // Indicate an error
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion_numerica ::= valor_comando 
            {
              Double RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double vc = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = vc;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_numerica",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor_comando ::= COMANDO LBRACKET lista_numeros RBRACKET 
            {
              Double RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cmd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int numsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Double> nums = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        double resultValue = Double.NaN; // Default to NaN

        try {
            switch (cmd.trim()) {
                case "sumar":
                    resultValue = Operations.plus(nums);
                    break;
                case "restar":
                    resultValue = Operations.minus(nums);
                    break;
                case "multiplicar":
                    resultValue = Operations.times(nums);
                    break;
                case "dividir":
                    resultValue = Operations.divide(nums);
                    break;
                case "porcentaje":
                    if (nums.size() >= 2) {
                        resultValue = Operations.percentage(nums.get(0), nums.get(1));
                    } else {
                        throw new Exception("Se necesitan al menos dos números para 'porcentaje'.");
                    }
                    break;
                case "margen_ganancia":
                    if (nums.size() >= 2) {
                        resultValue = Operations.margen_ganancia(nums.get(0), nums.get(1));
                    } else {
                        throw new Exception("Se necesitan al menos dos números para 'margen_ganancia'.");
                    }
                    break;
                case "IVA":
                    if (nums.size() >= 1) {
                        resultValue = Operations.iva(nums.get(0));
                    } else {
                        throw new Exception("Se necesita un número para 'IVA'.");
                    }
                    break;
                case "ISR":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isr(nums.get(0));
                    } else {
                        throw new Exception("Se necesita un número para 'ISR'.");
                    }
                    break;
                case "ISN":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isn(nums.get(0));
                    } else {
                        throw new Exception("Se necesita un número para 'ISN'.");
                    }
                    break;
                case "ISH":
                    if (nums.size() >= 1) {
                        resultValue = Operations.ish(nums.get(0));
                    } else {
                        throw new Exception("Se necesita un número para 'ISH'.");
                    }
                    break;
                case "ISAN":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isan(nums.get(0));
                    } else {
                        throw new Exception("Se necesita un número para 'ISAN'.");
                    }
                    break;
                case "ISAI":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isai(nums.get(0));
                    } else {
                        throw new Exception("Se necesita un número para 'ISAI'.");
                    }
                    break;
                default:
                    throw new Exception("Comando no reconocido para asignación de valor.");
            }
        } catch (Exception e) {
            System.err.println("Error al evaluar comando como valor: " + e.getMessage());
            resultValue = Double.NaN; // Marcar como error
        }

        RESULT = resultValue;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_comando",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comando ::= COMANDO LBRACKET lista_numeros RBRACKET SEMIC 
            {
              Object RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String cmd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int numsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Double> nums = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        String output = "\n📌 Comando: " + cmd + "\n";
        output += "🔢 Entrada: " + nums + "\n";

        try {
            double resultValue = Double.NaN;
            String formattedResult = "";

            switch (cmd.trim()) {
                case "sumar":
                    resultValue = Operations.plus(nums);
                    formattedResult = "La suma es " + parser.currencyFormat.format(resultValue);
                    break;
                case "restar":
                    resultValue = Operations.minus(nums);
                    formattedResult = "La resta es " + parser.currencyFormat.format(resultValue);
                    break;
                case "multiplicar":
                    resultValue = Operations.times(nums);
                    formattedResult = "La multiplicación es " + parser.currencyFormat.format(resultValue);
                    break;
                case "dividir":
                    resultValue = Operations.divide(nums);
                    formattedResult = "La división es " + parser.currencyFormat.format(resultValue);
                    break;
                case "porcentaje":
                    if (nums.size() >= 2) {
                        resultValue = Operations.percentage(nums.get(0), nums.get(1));
                        formattedResult = "El " + parser.percentageFormat.format(nums.get(1) / 100) + " de " + parser.currencyFormat.format(nums.get(0)) + " es " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesitan al menos dos números para 'porcentaje'.");
                    }
                    break;
                case "margen_ganancia":
                    if (nums.size() >= 2) {
                        // Aquí, margen_ganancia en Operations devuelve el porcentaje.
                        // Calculamos la ganancia neta aquí para el formato.
                        double salesA = nums.get(0);
                        double salesC = nums.get(1);
                        double gananciaNeta = salesA - salesC;
                        resultValue = Operations.margen_ganancia(salesA, salesC); // Esto es el porcentaje
                        formattedResult = "El margen de ganancia es: " + parser.currencyFormat.format(gananciaNeta) + "\n✅ El margen de ganancia porcentual es: " + parser.percentageFormat.format(resultValue / 100);
                    } else {
                        throw new Exception("Se necesitan al menos dos números para 'margen_ganancia'.");
                    }
                    break;
                case "IVA":
                    if (nums.size() >= 1) {
                        double originalAmount = nums.get(0);
                        resultValue = Operations.iva(originalAmount); // Esto es el total con IVA
                        double ivaAmount = resultValue - originalAmount; // Calculamos el monto de IVA aquí
                        formattedResult = "El IVA de " + parser.currencyFormat.format(originalAmount) + " son " + parser.currencyFormat.format(ivaAmount) + ". Dando un total de " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesita un número para 'IVA'.");
                    }
                    break;
                case "ISR":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isr(nums.get(0));
                        formattedResult = "El ISR para " + parser.currencyFormat.format(nums.get(0)) + " es " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesita un número para 'ISR'.");
                    }
                    break;
                case "ISN":
                    if (nums.size() >= 1) {
                        double originalAmount = nums.get(0);
                        resultValue = Operations.isn(originalAmount); // Esto es el total con ISN
                        double isnAmount = resultValue - originalAmount; // Calculamos el monto de ISN aquí
                        formattedResult = "El ISN de " + parser.currencyFormat.format(originalAmount) + " son " + parser.currencyFormat.format(isnAmount) + ". Dando un total de " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesita un número para 'ISN'.");
                    }
                    break;
                case "ISH":
                    if (nums.size() >= 1) {
                        double originalAmount = nums.get(0);
                        resultValue = Operations.ish(originalAmount); // Esto es el total con ISH
                        double ishAmount = resultValue - originalAmount; // Calculamos el monto de ISH aquí
                        formattedResult = "El ISH de " + parser.currencyFormat.format(originalAmount) + " son " + parser.currencyFormat.format(ishAmount) + ". Dando un total de " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesita un número para 'ISH'.");
                    }
                    break;
                case "ISAN":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isan(nums.get(0));
                        formattedResult = "El ISAN del vehículo que costó " + parser.currencyFormat.format(nums.get(0)) + " es " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesita un número para 'ISAN'.");
                    }
                    break;
                case "ISAI":
                    if (nums.size() >= 1) {
                        resultValue = Operations.isai(nums.get(0));
                        formattedResult = "El ISAI de " + parser.currencyFormat.format(nums.get(0)) + " es " + parser.currencyFormat.format(resultValue);
                    } else {
                        throw new Exception("Se necesita un número para 'ISAI'.");
                    }
                    break;
                default:
                    output += "⚠ Error: Comando no reconocido.\n";
                    break;
            }

            if (!formattedResult.isEmpty()) {
                output += "✅ " + formattedResult;
            } else if (!Double.isNaN(resultValue)) {
                 output += "✅ Resultado: " + parser.currencyFormat.format(resultValue);
            } else {
                output += "❌ Error: No se pudo calcular o el comando no devolvió un resultado formateado.";
            }

        } catch (Exception e) {
            output += "❌ Error en la ejecución: " + e.getMessage();
        }

        RESULT = output;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_numeros ::= expresion_numerica 
            {
              ArrayList<Double> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ArrayList<Double> l = new ArrayList<>();
        l.add(n);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_numeros",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_numeros ::= lista_numeros COMA expresion_numerica 
            {
              ArrayList<Double> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Double> lista = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        lista.add(n);
        RESULT = lista;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_numeros",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
