import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:
  public static final int EXPECTED_CONFLICTS = 3;
:};

/* Terminales */
terminal String COMANDO;
terminal String COMA;
terminal String LBRACKET;
terminal String RBRACKET;
terminal String SEMIC;
terminal Double NUMERO;

/* No terminales */
nonterminal Object programa;
nonterminal Object comando;
nonterminal ArrayList<Double> lista_numeros;

/* Precedencias */
precedence left COMA;
precedence left NUMERO;
precedence left COMANDO, LBRACKET;

start with programa;

programa ::= comando:output{:
        RESULT = output; // ðŸ”¹ Ahora `resultado` almacena el valor y lo pasa al parser
    :}
;
comando ::=
    COMANDO:cmd LBRACKET lista_numeros:nums RBRACKET SEMIC
    {:
        Double output = null;
        try {
            switch (cmd.trim()) {
                case "sumar":
                    output = Operations.plus(nums);
                    break;
                case "restar":
                    output = Operations.minus(nums);
                    break;
                case "multiplicar":
                    output = Operations.times(nums);
                    break;
                case "dividir":
                    output = Operations.divide(nums);
                    break;
                case "porcentaje":
                    if (nums.size() >= 2)
                        output = Operations.percentage(nums.get(0), nums.get(1));
                    else
                        output = null;
                    break;
                case "margen_ganancia":
                    if (nums.size() >= 2)
                        output = Operations.margen_ganancia(nums.get(0), nums.get(1));
                    else
                        output = null;
                    break;
                case "IVA":
                    if (nums.size() >= 1)
                        output = Operations.iva(nums.get(0));
                    else
                        output = null;
                    break;
                case "ISR":
                    if (nums.size() >= 1)
                        output = Operations.isr(nums.get(0));
                    else
                        output = null;
                    break;
                case "ISN":
                    if (nums.size() >= 1)
                        output = Operations.isn(nums.get(0));
                    else
                        output = null;
                    break;
                case "ISH":
                    if (nums.size() >= 1)
                        output = Operations.ish(nums.get(0));
                    else
                        output = null;
                    break;
                case "ISAN":
                    if (nums.size() >= 1)
                        output = Operations.isan(nums.get(0));
                    else
                        output = null;
                    break;
                case "ISAI":
                    if (nums.size() >= 1)
                        output = Operations.isai(nums.get(0));
                    else
                        output = null;
                    break;
                default:
                    output = null;
            }
        } catch (Exception e) {
            output = null;
        }
        System.out.println("ðŸ“Œ Valor asignado a RESULT: " + output);
        RESULT = output;
    :}
;

lista_numeros ::=
    NUMERO:n
    {:
        ArrayList<Double> l = new ArrayList<>();
        l.add(n);
        RESULT = l;
    :}
  |
    lista_numeros:lista COMA NUMERO:n
    {:
        lista.add(n);
        RESULT = lista;
    :}
;
